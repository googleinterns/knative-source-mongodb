/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by injection-gen. DO NOT EDIT.

package mongodbsource

import (
	"context"
	// "errors"
	"fmt"
	"go.uber.org/zap"
	"knative.dev/pkg/logging"

	"k8s.io/client-go/kubernetes"

	v1alpha1 "github.com/googleinterns/knative-source-mongodb/pkg/apis/sources/v1alpha1"
	mongodbsource "github.com/googleinterns/knative-source-mongodb/pkg/client/injection/reconciler/sources/v1alpha1/mongodbsource"
	// "go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"
	v1 "k8s.io/api/core/v1"
	corev1listers "k8s.io/client-go/listers/core/v1"
	reconciler "knative.dev/pkg/reconciler"
)

// TODO: PLEASE COPY AND MODIFY THIS FILE AS A STARTING POINT

// newReconciledNormal makes a new reconciler event with event type Normal, and
// reason MongoDbSourceReconciled.
func newReconciledNormal(namespace, name string) reconciler.Event {
	return reconciler.NewEvent(v1.EventTypeNormal, "MongoDbSourceReconciled", "MongoDbSource reconciled: \"%s/%s\"", namespace, name)
}

// Reconciler implements controller.Reconciler for MongoDbSource resources.
type Reconciler struct {
	// Clients
	kubeClientSet kubernetes.Interface

	// Lister
	secretLister corev1listers.SecretLister
}

// Check that our Reconciler implements Interface
var _ mongodbsource.Interface = (*Reconciler)(nil)

// Optionally check that our Reconciler implements Finalizer
//var _ mongodbsource.Finalizer = (*Reconciler)(nil)

// Optionally check that our Reconciler implements ReadOnlyInterface
// Implement this to observe resources even when we are not the leader.
//var _ mongodbsource.ReadOnlyInterface = (*Reconciler)(nil)

// Optionally check that our Reconciler implements ReadOnlyFinalizer
// Implement this to observe tombstoned resources even when we are not
// the leader (best effort).
//var _ mongodbsource.ReadOnlyFinalizer = (*Reconciler)(nil)

// ReconcileKind implements Interface.ReconcileKind.
func (r *Reconciler) ReconcileKind(ctx context.Context, src *v1alpha1.MongoDbSource) reconciler.Event {
	src.Status.InitializeConditions()
	src.Status.ObservedGeneration = src.Generation

	// Try to connect to db and see if it works
	fmt.Printf("----------------------------------------------------------------------------------------------------------------------------------")
	fmt.Printf(src.Spec.Secret.Name)

	secret, err := r.secretLister.Secrets(src.Namespace).Get(src.Spec.Secret.Name)
	if err != nil {
		logging.FromContext(ctx).Error("Unable to read MongoDb credentials secret", zap.Error(err))
		return err
	}
	rawURI, ok := secret.Data["URI"]
	if !ok {
		logging.FromContext(ctx).Error("Unable to get MongoDb URI field", zap.Any("secretName", secret.Name), zap.Any("secretNamespace", secret.Namespace))
		return err
	}
	URI := string(rawURI)

	fmt.Printf("raw path: %s", URI)
	// // Connect to the mongo replica-set
	// // URI := "mongodb://dev-test:google@10.12.0.34:27017/countries"
	// URI := fmt.Sprintf("mongodb://%s@10.12.0.34:27017/countries", src.Spec.Secret.Name)

	client, err := mongo.NewClient(options.Client().ApplyURI(URI))
	if err != nil {
		logging.FromContext(ctx).Error("Couldn't connect to DB: %w", err)
		return err
	}
	err = client.Connect(ctx)
	if err != nil {
		logging.FromContext(ctx).Error("Couldn't connect to DB: %w", err)
		return err
	}
	// Make sure it is connected
	err = client.Ping(ctx, readpref.Primary())
	if err != nil {
		logging.FromContext(ctx).Error("Couldn't connect to DB: %w", err)
		return err
	}
	defer client.Disconnect(ctx)

	// See if database exists
	if client.Database(src.Spec.Database) == nil {
		logging.FromContext(ctx).Error("Couldn't find DB %s: %w", src.Spec.Database, err)
	}

	// See if collection exists
	if client.Database(src.Spec.Database).Collection(src.Spec.Collection) == nil {
		logging.FromContext(ctx).Error("Couldn't find Collection '%s' in database '%s': %w", src.Spec.Collection, src.Spec.Database, err)
	}

	// databases, err := client.ListDatabaseNames(ctx, bson.M{})
	// if err != nil {
	// 	logging.FromContext(ctx).Error("Couldn't look up if database exists: %w", err)
	// }
	// if !stringInSlice(src.Spec.Database, databases) {
	// 	err = errors.New("Couldn't find database name in available databases.")
	// 	logging.FromContext(ctx).Error("Couldn't find database %s in available database %s: %w", src.Spec.Database, fmt.Sprint(databases), err)
	// 	return err
	// }

	// // See if collection exists

	return newReconciledNormal(src.Namespace, src.Name)
}

// Optionally, use FinalizeKind to add finalizers. FinalizeKind will be called
// when the resource is deleted.
//func (r *Reconciler) FinalizeKind(ctx context.Context, o *v1alpha1.MongoDbSource) reconciler.Event {
//	// TODO: add custom finalization logic here.
//	return nil
//}

// Optionally, use ObserveKind to observe the resource when we are not the leader.
// func (r *Reconciler) ObserveKind(ctx context.Context, o *v1alpha1.MongoDbSource) reconciler.Event {
// 	// TODO: add custom observation logic here.
// 	return nil
// }

// Optionally, use ObserveFinalizeKind to observe resources being finalized when we are no the leader.
//func (r *Reconciler) ObserveFinalizeKind(ctx context.Context, o *v1alpha1.MongoDbSource) reconciler.Event {
// 	// TODO: add custom observation logic here.
//	return nil
//}

func stringInSlice(a string, list []string) bool {
	for _, b := range list {
		if b == a {
			return true
		}
	}
	return false
}
